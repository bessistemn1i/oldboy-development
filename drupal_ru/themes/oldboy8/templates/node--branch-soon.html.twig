{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

	{% set academy = drupal_entity('block_content', 1) %}
	{% set brabercount = drupal_entity('block_content', 2) %}
	{% set braberplaces = drupal_entity('block_content', 3) %}


    <header class="hero hero--branch">
        <div class="hero__top">
            <div class="hero__logo"><a href="/"><img src="/{{ directory }}/dist/img/logo.svg" alt="Oldboy Barbershop vector logo" title="Oldboy Barbershop Главная" /></a></div>
            <div class="hero__nav hero__nav--hidden">
                <nav class="main-nav">
					{% include '@oldboy8/includes/topmenu.html.twig' %}
                </nav>
            </div>
			{% include '@oldboy8/includes/topcity.html.twig' %}
        </div>
        <div class="hero__content">
            <div class="hero__caption">
                <div class="hero-caption hero-caption--city">
                    <h1 class="hero-caption__title hero-caption__title--hidden">Крупнейшая международная сеть мужских парикмахерских <span class="hero-caption__big">oldboy <br>barbershop</span></h1>
					<p class="hero-caption__location">{{ content.field_city.0 }}</p>
                </div>
			</div>
			<div class="hero__coming">
				<div class="coming">
					<p class="coming__subtitle">Скоро&nbsp;открытие <br><span>барбершопа</span></p>
					<h2 class="coming__date">{{ node.field_date_open.0.value|raw|date('d.m.Y') }}</h2>
				</div>
			</div>
			<div class="hero__contacts-n-buttons">
				<div class="hero__contacts">
					<div class="contact">
						<h2 class="contact__title">Адрес</h2>
						<p class="contact__value">{{ node.field_address.0.value|raw }}</p>
						{% if node.field_place.0.value|trim %}
							<p class="contact__value--place">{{ node.field_place.0.value|raw|trim }}</p><br> 
						{% endif %}
						{% if node.field_metro.0.value|trim %}
							<p class="contact__value--metro">
							{% set stations = node.field_metro.0.value|raw|striptags|trim|split("\n") %}
							{% for station in stations %}
								{% if station %} <span>{{ station }}</span> {% endif %}
							{% endfor %}
							</p>
						{% endif %}
					</div>
					<div class="contact">
						<h2 class="contact__title">Телефон</h2>
						{% set phonelink = content.field_phone.0 %}
						{% if content.field_phonelink.0 %}
							{% set phonelink = content.field_phonelink.0 %}
						{% endif %} 
						<p class="contact__value"><a href="tel:{{ phonelink }}">{{ content.field_phone.0 }}</a></p>
					</div>
					{% if content.field_work_hours %}
					<div class="contact">
						<h2 class="contact__title">Часы работы</h2>
						<p class="contact__value">{{ content.field_work_hours.0 }}</p>
					</div>
					{% endif %}
				</div>
				{#
				<div class="hero__countdown countdown">
					<div class="countdown__block">
						{% set opening = content.field_date_open.0 %}
						<div class="countdown__date" id="countdown_days"><span class="countdown__number">{{ date().timestamp }}</span><span class="countdown__number">3</span></div>
						<p class="countdown__text">дней</p>
					</div>
					<div class="countdown__block">
						<div class="countdown__date" id="countdown_hours"><span class="countdown__number">0</span><span class="countdown__number">8</span></div>
						<p class="countdown__text">часов</p>
					</div>
					<div class="countdown__block">
						<div class="countdown__date" id="countdown_minutes"><span class="countdown__number">0</span><span class="countdown__number">7</span></div>
						<p class="countdown__text">минут</p>
					</div>
					<script>
						function countDown(opening, d) {
							var viewNodes = {
								days:d.querySelector('#countdown_days'),
								hours:d.querySelector('#countdown_hours'),
								minutes:d.querySelector('#countdown_minutes')
							};

							function setSplitSpan(val, node) {
								var vals = val.toString().split('');
								if (vals.length == 1) {
									vals[1] = vals[0]; vals[0] = '0';
								}
								for (i=0;i<node.childNodes.length;i++) {
									if (i < vals.length) {
										node.childNodes[i].innerHTML = vals[i];
									}
								}
							}

							var update = function() {
								var timeValue = {
									days:0,
									hours:0,
									minutes:0
								};

								var diffTime = opening - Math.floor(new Date().getTime() / 1000);
								if (diffTime > 0) {
									timeValue.days = Math.floor(diffTime / 86400);
									diffTime = diffTime - timeValue.days*86400;
									timeValue.hours = Math.floor(diffTime / 3600); 
									diffTime = diffTime - timeValue.hours*3600;
									timeValue.minutes = Math.floor(diffTime / 60); 
								}

								for (i in timeValue) {
									if (!! viewNodes[i]) {
										//viewNodes[i].innerHTML = timeValue[i];
										setSplitSpan(timeValue[i], viewNodes[i]);
									}
								}
								//setTimeout(update, 1000);
							}
							update();
						}
						document.addEventListener('DOMContentLoaded', function(){ 
							var dateOpen = {{ content.field_date_open.0 }};
							countDown(dateOpen, document);
							var monthNames = ["Января", "Февраля", "Марта", "Апреля", "Мая", "Июня", "Июля", "Августа", "Сентября", "Октября", "Ноября", "Декабря"];
							var showDate = new Date();
							showDate.setTime(dateOpen*1000);
							var showString = showDate.getDate()+' '+monthNames[showDate.getMonth()];
							document.querySelector('#date-open-text').innerHTML = showString;
						});
					</script>
				</div>
				#}
				<div class="hero__buttons hero__buttons--branch"><a class="button ms_booking" href="#">Запись онлайн<br></a>{% if content.field_present_link.0 %}<a class="button button--ghost" href="javascript:void(0);" data-cp-widget="{{ content.field_present_link.0 }}">Сертификат</a><script async data-id="cp-loader" data-url=""{{ content.field_present_link.0 }}" src="https://cardspro.ru/loader/loader.js"></script>{% endif %}
					<ul class="social">
						{% if content.field_link_vk.0 %}
							<li class="social__item"><a class="social__icon icon--vk" href="{{ content.field_link_vk.0 }}">ВКонтакте</a></li>
						{% endif %}
						{% if content.field_link_facebook.0 %}
							<li class="social__item"><a class="social__icon icon--facebook" href="{{ content.field_link_facebook.0 }}">Facebook</a></li>
						{% endif %}
						{% if content.field_link_instagram.0 %}
							<li class="social__item"><a class="social__icon icon--instagram" href="{{ content.field_link_instagram.0 }}">Instagram</a></li>
						{% endif %}
					</ul>
				</div>
			</div>
			{% if node.field_phone_join_team.0.value|trim %}
			<aside class="hero__vacancy">
                <div class="vacancy">
                    <p class="vacancy__subtitle">Хочешь работать в&nbsp;нашем Барбершопе?</p>
                    <h2 class="vacancy__title">Стань частью команды OldBoy&nbsp;BarberShop</h2>
					{% set phonehref= node.field_phone_join_team.0.value|raw|replace({'(':'',')':'','-':'',' ':''}) %}
					<p class="vacancy__subtitle"><a href="tel:{{phonehref}}">Звони: {{ content.field_phone_join_team.0 }}</a></p>
				</div>
			</aside>
			{% endif %}
        </div>
    </header>
	{% include '@oldboy8/includes/locations.html.twig' %}
    <footer class="footer">
		{% include '@oldboy8/includes/footer-branch.html.twig' %}
    </footer>
	{% if content.field_subscribe_link %}
		{{ node.field_subscribe_link.value|raw }}
	{% endif %}
    <script src="/{{ directory }}/dist/scripts.js?v={{ js_ver }}"></script>
	<script src="/{{ directory }}/dist/dummy.js"></script>
