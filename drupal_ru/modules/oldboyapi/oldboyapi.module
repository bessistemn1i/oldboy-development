<?php
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Component\Render\PlainTextOutput;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Logger\LoggerChannelFactoryInterface;
/**
 * @file
 * Defines some api.
 */

function oldboyapi_theme_suggestions_node_alter(array &$suggestions, array $variables) { // template for 404 page
 if (!is_null(Drupal::requestStack()->getCurrentRequest()->attributes->get('exception'))) {
    $code = Drupal::requestStack()->getCurrentRequest()->attributes->get('exception')->getStatusCode();
	if (is_numeric($code) && $code >= 400 and $code < 500) {
      $suggestions[] = 'page__' . $code;
	}
 }
}


// remove unnessesary link rel (revision, etc.)
/**
 * Implements hook_entity_view_alter().
 * @param array $build
 * @param EntityInterface $entity
 * @param EntityViewDisplayInterface $display
 */
function oldboyapi_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Cheking view_mode for node.
  if ($build['#view_mode'] !== 'full' && $entity Instanceof NodeInterface) {
    return;
  }
  _remove_header_links($build);
}

/**
 * Implements hook_page_attachments_alter().
 * @param array $attachments
 */
function oldboyapi_page_attachments_alter(array &$attachments) {
  _remove_header_links($attachments);
}

function _remove_header_links(array &$attachments) {
  // Cheking html_head_link on attached tags in head.
  if (!isset($attachments['#attached']['html_head_link'])) {
    return;
  }
  // Array to unset.
  $unset_html_head_link = [
    'delete-form',
    'edit-form',
    'version-history',
    'revision',
	'alternate',
	'shortlink',
    'display',
    'drupal:content-translation-overview',
    'drupal:content-translation-add',
    'drupal:content-translation-edit',
    'drupal:content-translation-delete',
    'shortlink',
    'canonical'
  ];
  // Unset loop.
  foreach ($attachments['#attached']['html_head_link'] as $key => $value) {
    if (isset($value[0]['rel']) && in_array($value[0]['rel'], $unset_html_head_link)) {
      unset($attachments['#attached']['html_head_link'][$key]);
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function oldboyapi_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'page_attachments_alter') {
    $group = $implementations['oldboyapi'];
    unset($implementations['oldboyapi']);
    $implementations['oldboyapi'] = $group;
  }
}

function oldboyapi_metatags_attachments_alter(array &$meta_attachments) {/*{{{*/
  $schema_attachments = oldboyapi_get_schema_from_route();

  if (!isset($schema_attachments['#attached'])) {
	  $schema_attachments['#attached'] = array();
  }
  if (!isset($schema_attachments['#attached']['html_head'])) {
	  $schema_attachments['#attached']['html_head'] = array();
  }
  $meta_attachments = array_merge_recursive($meta_attachments, $schema_attachments);

}/*}}}*/

function oldboyapi_get_route_entity() {/*{{{*/
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  // Look for a canonical entity view page, e.g. node/{nid}, user/{uid}, etc.
  $matches = [];
  preg_match('/entity\.(.*)\.(latest[_-]version|canonical)/', $route_name, $matches);
  if (!empty($matches[1])) {
    $entity_type = $matches[1];
    return $route_match->getParameter($entity_type);
  }

  return NULL;
}/*}}}*/

function oldboyapi_get_schema_from_route($entity = NULL) {/*{{{*/
  //$metatag_manager = \Drupal::service('metatag.manager');
  $schema_manager = new OldboySchemaManager();

  if (!$entity) {
    $entity = oldboyapi_get_route_entity();
  }

  if (!empty($entity) && $entity instanceof ContentEntityInterface) {
    // If content entity does not have an ID the page is likely an "Add" page,
    if (!$entity->id()) {
      return NULL;
    }

    foreach ($schema_manager->tagsFromEntity($entity) as $tag => $data) {
      $metatags[$tag] = $data;
    }
  }

  $result = array();
  if (!empty($metatags))
	  $result = $schema_manager->generateElements($metatags, $entity);
  return $result;
}/*}}}*/

class OldboySchemaManager {/*{{{*/
  public function tagsFromEntity(ContentEntityInterface $entity) {
    $tags = [];

    $fields = $this->getFields($entity);

    /* @var \Drupal\field\Entity\FieldConfig $field_info */
    foreach ($fields as $field_name => $field_info) {
      $tags = $this->getFieldTags($entity, $field_name);
    }

    return $tags;
  }

  protected function getFieldTags(ContentEntityInterface $entity, $field_name) {
    $tags = [];
    foreach ($entity->{$field_name} as $item) {
      $serialized_value = $item->get('value')->getValue();
      if (!empty($serialized_value)) {
        //$tags += unserialize($serialized_value);
        $tags[$field_name] = $serialized_value;
      }
    }

    return $tags;
  }

  protected function getFields(ContentEntityInterface $entity) {
    $field_list = [];

    if ($entity instanceof ContentEntityInterface) {
      // Get a list of the metatag field types.
      $field_types = $this->fieldTypes();

      // Get a list of the field definitions on this entity.
      $definitions = $entity->getFieldDefinitions();

      // Iterate through all the fields looking for ones in our list.
      foreach ($definitions as $field_name => &$definition) {
        // Get the field type, ie: metatag.
        //$field_type = $definition->getType();
        //if (isset($field_type) && in_array($field_type, $field_types)) {
          //$field_list[$field_name] = $definition;
        //}
		  if (in_array($field_name, $field_types)) {
			  $field_list[$field_name] = $definition;
		  }
      }
    }

    return $field_list;
  }


  protected function fieldTypes() {
    return ['field_schema'];
  }

  public function generateElements(array $tags, $entity = NULL) {
    $elements = [];
    $tags = $this->generateRawElements($tags, $entity);

    foreach ($tags as $name => $tag) {
      if (!empty($tag)) {
        $elements['#attached']['html_head'][] = [
          $tag,
          $name,
        ];
      }
    }

    return $elements;
  }


  public function generateRawElements(array $tags, $entity = NULL) {
    // Ignore the update.php path.
    $request = \Drupal::request();
    if ($request->getBaseUrl() == '/update.php') {
      return [];
    }

    $rawTags = [];

    // Each element of the $values array is a tag with the tag plugin name as
    // the key.
    foreach ($tags as $tag_name => $value) {
        $tag = new OldboySchema($tag_name);

        $tag->setValue($value);

        $output = $tag->output();

        if (!empty($output)) {
          $output = $tag->multiple() ? $output : [$output];

          // Backwards compatibility for modules which don't support this logic.
          if (isset($output['#tag'])) {
            $output = [$output];
          }
          foreach ($output as $index => $element) {
            // Add index to tag name as suffix to avoid having same key.
            $index_tag_name = $tag->multiple() ? $tag_name . '_' . $index : $tag_name;
            $rawTags[$index_tag_name] = $element;
          }
        }
    }

    return $rawTags;
  }
}/*}}}*/

class OldboySchema {/*{{{*/

  protected $value;
  protected $multiple;

	public function __construct($tag_name) {
		$this->multiple = false;
	}

  public function value() {
    return $this->value;
  }

  public function setValue($value) {
    $this->value = $value;
  }
  public function multiple() {
    return $this->multiple;
  }
  private function tidy($value) {
    return trim($value);
  }
  public function output() {
    if (empty($this->value)) {
      return $this->multiple() ? [] : '';
    }
	$value = $this->value();

    $values = $this->multiple() ? explode(',', $value) : [$value];
    $elements = [];
    foreach ($values as $value) {
      $value = $this->tidy($value);
	   $elements[] = [
		   '#type' => 'html_tag',
		   '#tag' => 'script',
		   '#attributes' => array(
			   'type' => "application/ld+json",
		   ),
		   '#allowed_tags' => ['script', 'meta'],
		   '#value' => $value,
		   //'#markup' => $value
	   ];
    }

    return $this->multiple() ? $elements : reset($elements);
  }

}/*}}}*/
